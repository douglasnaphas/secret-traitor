# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AlliesAndEnemiesPlayerState implements GamePlayerState {
  game: Game!
  id: ID!
}

type AlliesAndEnemiesState implements GameState {
  game: Game!
  id: ID!
  players: [Player!]!
}

"""Provides high level details about a game."""
type Game {
  class: GameClass!
  code: String!
  host: Player!
  id: ID!
  players: [Player!]!
  status: GameStatus!
}

"""
The classification of a game. This property is used to determine other more specific properties of a specific game.
"""
enum GameClass {
  AlliesNEnemies
}

"""Represents the relationship between a player and a game"""
type GamePlayer {
  game: Game!
  id: String!
  player: Player!
}

interface GamePlayerState {
  game: Game!
  id: ID!
}

interface GameState {
  game: Game!
  id: ID!
  players: [Player!]!
}

"""
The current status of a game. Designates whether a game is complete, joinable, or playable.
"""
enum GameStatus {
  Archived
  Closed
  InLobby
  InProgress
}

"""
Game types determine the games that are playable. Includes a display name, description and unique code.
"""
type GameType {
  description: String!
  displayName: String!
  gameClass: GameClass!
}

type Mutation {
  createGame(gameClass: GameClass!, playerCode: String!): Game
  deleteGame(id: Boolean!): Boolean!
  joinGame(gameId: String!, playerCode: String!, playerNickname: String!): GamePlayer
}

"""Player details"""
type Player {
  code: String!
  nickname: String
}

type Query {
  allGames: [Game!]!
  game(code: String!): Game
  gamePlayer(gameCode: String!, playerCode: String!): GamePlayer
  gameState(gameId: String!): GameState
  gameTypes: [GameType!]!
  joinableGames: [Game!]!
  playerGameState(playerGameId: String!): GamePlayerState
}

type Subscription {
  play(gameId: ID!, gamePlayerId: ID!): GamePlayerState!
}
