# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

interface Event {
    timestamp: DateTime!
    type: String!
}

interface GameEvent {
    game: Game
    player: Player
    source: Player!
    state(playId: ID!): GameState
    timestamp: DateTime!
    type: String!
}

interface GameState {
    game: Game!
    playId: ID!
}

type AlliesAndEnemiesCallVetoEvent implements Event & GameEvent {
    game: Game
    player: Player
    source: Player!
    state(playId: ID!): GameState
    timestamp: DateTime!
    type: String!
    vote: AlliesAndEnemiesVoteValue!
}

type AlliesAndEnemiesExecutePlayer implements Event & GameEvent {
    game: Game
    player: Player
    source: Player!
    state(playId: ID!): GameState
    timestamp: DateTime!
    type: String!
}

type AlliesAndEnemiesFirstHandDiscardEvent implements Event & GameEvent {
    game: Game
    player: Player
    source: Player!
    state(playId: ID!): GameState
    timestamp: DateTime!
    type: String!
}

type AlliesAndEnemiesGameState implements GameState {
    board: BoardState!
    currentTurn: CurrentTurn!
    game: Game!
    playId: ID!
    players: [AlliesAndEnemiesPlayer!]!
    victoryStatus: AlliesAndEnemiesVictoryStatus
    viewingPlayer: AlliesAndEnemiesPlayer!
}

type AlliesAndEnemiesInvestigateLoyaltyEvent implements Event & GameEvent {
    game: Game
    player: Player
    source: Player!
    state(playId: ID!): GameState
    timestamp: DateTime!
    type: String!
}

type AlliesAndEnemiesNominationEvent implements Event & GameEvent {
    game: Game
    nomination: AlliesAndEnemiesPlayer!
    player: Player
    source: Player!
    state(playId: ID!): GameState
    timestamp: DateTime!
    type: String!
}

type AlliesAndEnemiesPlayer {
    id: ID!
    nickname: String
    position: Float!
    role: AlliesAndEnemiesPlayerRole
    status: AlliesAndEnemiesPlayerStatus!
}

type AlliesAndEnemiesPolicyPeekEvent implements Event & GameEvent {
    game: Game
    player: Player
    source: Player!
    state(playId: ID!): GameState
    timestamp: DateTime!
    type: String!
}

type AlliesAndEnemiesSecondHandDiscardEvent implements Event & GameEvent {
    game: Game
    player: Player
    source: Player!
    state(playId: ID!): GameState
    timestamp: DateTime!
    type: String!
}

type AlliesAndEnemiesSpecialElectionEvent implements Event & GameEvent {
    game: Game
    nomination: AlliesAndEnemiesPlayer!
    player: Player
    source: Player!
    state(playId: ID!): GameState
    timestamp: DateTime!
    type: String!
}

type AlliesAndEnemiesVetoVoteEvent implements Event & GameEvent {
    game: Game
    player: Player
    source: Player!
    state(playId: ID!): GameState
    timestamp: DateTime!
    type: String!
    vote: AlliesAndEnemiesVoteValue!
}

type AlliesAndEnemiesVictoryStatus {
    message: String!
    team: AlliesAndEnemiesFaction!
    type: AlliesAndEnemiesVictoryType!
}

type AlliesAndEnemiesVoteEvent implements Event & GameEvent {
    game: Game
    player: Player
    source: Player!
    state(playId: ID!): GameState
    timestamp: DateTime!
    type: String!
    vote: AlliesAndEnemiesVoteValue!
}

type BoardRow {
    cards: [Card!]!
    maxCards: Float!
}

type BoardState {
    actions: [AlliesAndEnemiesBoardActionType!]!
    ally: BoardRow!
    enemy: BoardRow!
}

type Card {
    suit: AlliesAndEnemiesFaction!
}

type CurrentTurn {
    action: AlliesAndEnemiesBoardActionType
    consecutiveFailedElections: Float!
    elected: Boolean!
    enableVeto: Boolean!
    firstHand: [Card!]
    ineligibleNominations: [AlliesAndEnemiesPlayer!]!
    nominatedPlayer: AlliesAndEnemiesPlayer
    number: Float!
    position: Float!
    secondHand: [Card!]
    specialElection: Boolean!
    status: AlliesAndEnemiesTurnStatus!
    waitingOn: AlliesAndEnemiesPlayer!
}

"Provides high level details about a game."
type Game {
    hosts: [Player!]!
    id: ID!
    players: [Player!]!
    state(playId: ID!): GameState
    status: GameStatus!
    type: GameType!
}

"Game types determine the games that are playable. Includes a display name, description and unique code."
type GameDescription {
    description: String!
    displayName: String!
    type: GameType!
}

"Represents the relationship between a player and a game"
type GamePlayer {
    game: Game!
    id: ID!
    isHost: Boolean!
    player: Player!
}

type GameStatusEvent implements Event & GameEvent {
    changedFrom: GameStatus!
    changedTo: GameStatus!
    game: Game
    player: Player
    source: Player!
    state(playId: ID!): GameState
    timestamp: DateTime!
    type: String!
}

type JoinGameEvent implements Event & GameEvent {
    game: Game
    joined: Player!
    player: Player
    source: Player!
    state(playId: ID!): GameState
    timestamp: DateTime!
    type: String!
}

type Mutation {
    alliesAndEnemiesCallVeto(playId: ID!): AlliesAndEnemiesCallVetoEvent!
    alliesAndEnemiesExecutePlayer(playId: ID!, playerId: ID!): AlliesAndEnemiesExecutePlayer!
    alliesAndEnemiesFirstHandDiscard(index: Float!, playId: ID!): AlliesAndEnemiesFirstHandDiscardEvent!
    alliesAndEnemiesInvestigateLoyaltyOk(playId: ID!): AlliesAndEnemiesInvestigateLoyaltyEvent!
    alliesAndEnemiesNominate(nominatedPlayerId: ID!, playId: ID!): AlliesAndEnemiesNominationEvent!
    alliesAndEnemiesPolicyPeekOk(playId: ID!): AlliesAndEnemiesPolicyPeekEvent!
    alliesAndEnemiesSecondHandDiscard(index: Float!, playId: ID!): AlliesAndEnemiesSecondHandDiscardEvent!
    alliesAndEnemiesSpecialElection(playId: ID!, playerId: ID!): AlliesAndEnemiesSpecialElectionEvent!
    alliesAndEnemiesVetoVote(playId: ID!, vote: AlliesAndEnemiesVoteValue!): AlliesAndEnemiesVetoVoteEvent!
    alliesAndEnemiesVote(playId: ID!, vote: AlliesAndEnemiesVoteValue!): AlliesAndEnemiesVoteEvent!
    createGame(gameType: GameType!, playerId: ID!): Game
    deleteGame(id: ID!): Boolean!
    joinGame(gameId: String!, playerId: String!, playerNickname: String!): JoinGameEvent!
    setGameStatus(playId: ID!, status: GameStatus!): GameStatusEvent
}

"Player details"
type Player {
    id: ID!
    nickname: String
}

type Query {
    allGames: [Game!]!
    alliesAndEnemiesInvestigateLoyalty(playId: ID!, playerId: ID!): AlliesAndEnemiesPlayer
    alliesAndEnemiesPolicyPeek(playId: ID!): [Card!]!
    game(id: ID!): Game
    gamePlayer(gameId: String!, playerId: String!): GamePlayer
    gameTypes: [GameDescription!]!
    joinableGames: [Game!]!
    state(playId: ID!): GameState
}

type Subscription {
    play(gameId: ID!): GameEvent!
}

enum AlliesAndEnemiesBoardActionType {
    Execution
    InvestigateLoyalty
    None
    PolicyPeek
    SpecialElection
}

enum AlliesAndEnemiesFaction {
    Ally
    Enemy
}

enum AlliesAndEnemiesPlayerRole {
    Ally
    Enemy
    EnemyLeader
}

enum AlliesAndEnemiesPlayerStatus {
    Executed
    Governor
    None
    President
}

enum AlliesAndEnemiesTurnStatus {
    Election
    FirstHand
    GameOver
    Nomination
    SecondHand
    TakeAction
    Veto
}

enum AlliesAndEnemiesVictoryType {
    Cards
    Election
    Execution
}

enum AlliesAndEnemiesVoteValue {
    No
    Yes
}

"The current status of a game. Designates whether a game is complete, joinable, or playable."
enum GameStatus {
    Archived
    Closed
    InLobby
    InProgress
}

"This property is used to determine other more specific properties of a specific game."
enum GameType {
    AlliesNEnemies
}


"The javascript `Date` as string. Type represents date and time as the ISO Date string."
scalar DateTime