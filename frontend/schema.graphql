# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

interface Event {
    source: String!
    timestamp: DateTime!
    type: String!
}

interface GameState {
    game: Game!
    player: Player!
}

interface GameStateEvent {
    gameState: GameState!
    source: String!
    timestamp: DateTime!
    type: String!
}

type AlliesNEnemiesGameState implements GameState {
    board: BoardState!
    currentTurn: CurrentTurn
    game: Game!
    player: Player!
    team: TeamDetails!
}

type BoardRow {
    cards: [Card!]!
    maxCards: Float!
}

type BoardState {
    actions: [BoardActionType!]!
    ally: BoardRow!
    enemy: BoardRow!
}

type Card {
    suit: CardSuit!
}

type CurrentTurn {
    number: Float!
    status: TurnStatus!
    waitingOn: Player!
}

"Provides high level details about a game."
type Game {
    code: String!
    hosts: [Player!]!
    id: ID!
    players: [Player!]!
    status: GameStatus!
    type: GameType!
}

"Game types determine the games that are playable. Includes a display name, description and unique code."
type GameDescription {
    description: String!
    displayName: String!
    type: GameType!
}

"Represents the relationship between a player and a game"
type GamePlayer {
    game: Game!
    id: ID!
    isHost: Boolean!
    player: Player!
}

type GameStatusEvent implements Event & GameStateEvent {
    gameState: GameState!
    new: GameStatus!
    old: GameStatus!
    source: String!
    timestamp: DateTime!
    type: String!
}

type JoinGameEvent implements Event & GameStateEvent {
    gameState: GameState!
    source: String!
    timestamp: DateTime!
    type: String!
}

type Mutation {
    createGame(gameType: GameType!, playerCode: String!): Game
    deleteGame(id: Boolean!): Boolean!
    joinGame(gameCode: String!, playerCode: String!, playerNickname: String!): JoinGameEvent
    setGameStatus(playId: ID!, status: GameStatus!): GameStatusEvent
}

type Notification {
    date: DateTime!
    id: ID!
    message: String
}

"Player details"
type Player {
    code: String!
    id: ID!
    nickname: String
}

type Query {
    allGames: [Game!]!
    currentDate: DateTime!
    game(code: String!): Game
    gamePlayer(gameCode: String!, playerCode: String!): GamePlayer
    gameTypes: [GameDescription!]!
    joinableGames: [Game!]!
    play(playId: ID!): GameState
}

type Subscription {
    play(gameId: ID!, playId: ID!): GameStateEvent
}

type TeamDetails {
    playerRole: PlayerRole!
    teammates: [TeamPlayer!]
}

type TeamPlayer {
    code: String!
    id: ID!
    nickname: String
    role: PlayerRole!
}

enum BoardActionType {
    Execution
    InvestigateLoyalty
    None
    PolicyPeak
    SpecialElection
}

enum CardSuit {
    Ally
    Enemy
}

"The current status of a game. Designates whether a game is complete, joinable, or playable."
enum GameStatus {
    Archived
    Closed
    InLobby
    InProgress
}

"This property is used to determine other more specific properties of a specific game."
enum GameType {
    AlliesNEnemies
}

enum PlayerRole {
    Ally
    Enemy
    EnemyLeader
}

enum TurnStatus {
    Election
    FirstHand
    Nomination
    SecondHand
}


"The javascript `Date` as string. Type represents date and time as the ISO Date string."
scalar DateTime